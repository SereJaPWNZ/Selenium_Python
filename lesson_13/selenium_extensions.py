"""
–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –†–ê–°–®–ò–†–ï–ù–ò–Ø –¥–ª—è Selenium-–∫–æ–¥–∞
–§–∞–π–ª —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏ –∏ —É—Ç–∏–ª–∏—Ç–∞–º–∏ –¥–ª—è –µ—â–µ –±–æ–ª—å—à–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è
"""
import json
import csv
from enum import Enum
from typing import Dict, List, Any
from dataclasses import dataclass, asdict
from datetime import datetime
import logging


class AlertType(Enum):
    """–¢–∏–ø—ã alert'–æ–≤ –¥–ª—è –ª—É—á—à–µ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏"""
    SIMPLE = "simple"
    TIMER = "timer"
    CONFIRM = "confirm"
    PROMPT = "prompt"


@dataclass
class TestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    test_name: str
    status: str  # "PASSED", "FAILED", "ERROR"
    duration: float
    error_message: str = ""
    screenshot_path: str = ""
    timestamp: str = ""
    
    def __post_init__(self):
        if not self.timestamp:
            self.timestamp = datetime.now().isoformat()


class TestReporter:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    
    def __init__(self, config):
        self.config = config
        self.results: List[TestResult] = []
        self.logger = logging.getLogger("TestReporter")
    
    def add_result(self, result: TestResult):
        """–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        self.results.append(result)
        self.logger.info(f"–¢–µ—Å—Ç {result.test_name}: {result.status}")
    
    def generate_json_report(self, filename: str = "test_report.json"):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç JSON –æ—Ç—á–µ—Ç"""
        report_data = {
            "summary": {
                "total_tests": len(self.results),
                "passed": len([r for r in self.results if r.status == "PASSED"]),
                "failed": len([r for r in self.results if r.status == "FAILED"]),
                "errors": len([r for r in self.results if r.status == "ERROR"]),
                "generated_at": datetime.now().isoformat()
            },
            "results": [asdict(result) for result in self.results]
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
        
        self.logger.info(f"JSON –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
    
    def generate_csv_report(self, filename: str = "test_report.csv"):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç CSV –æ—Ç—á–µ—Ç"""
        if not self.results:
            return
        
        fieldnames = list(asdict(self.results[0]).keys())
        
        with open(filename, 'w', newline='', encoding='utf-8') as f:
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            writer.writeheader()
            for result in self.results:
                writer.writerow(asdict(result))
        
        self.logger.info(f"CSV –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
    
    def print_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        total = len(self.results)
        passed = len([r for r in self.results if r.status == "PASSED"])
        failed = len([r for r in self.results if r.status == "FAILED"])
        errors = len([r for r in self.results if r.status == "ERROR"])
        
        print(f"\n{'='*50}")
        print(f"–°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print(f"{'='*50}")
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
        print(f"üö´ –û—à–∏–±–æ–∫: {errors}")
        print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed/total*100):.1f}%" if total > 0 else "0%")


class ConfigManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ä–µ–¥"""
    
    @staticmethod
    def load_from_file(config_path: str) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            logging.warning(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {}
        except json.JSONDecodeError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {}
    
    @staticmethod
    def save_config_template(filename: str = "config_template.json"):
        """–°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        template = {
            "webdriver_path": "path/to/yandexdriver.exe",
            "browser_path": "path/to/browser.exe",
            "base_url": "https://demoqa.com/alerts",
            "explicit_wait": 10,
            "screenshot_dir": "screenshots",
            "window_size": [1920, 1080],
            "headless": True,
            "environments": {
                "development": {
                    "base_url": "https://dev.demoqa.com/alerts",
                    "headless": False
                },
                "staging": {
                    "base_url": "https://staging.demoqa.com/alerts",
                    "headless": True
                },
                "production": {
                    "base_url": "https://demoqa.com/alerts",
                    "headless": True
                }
            }
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(template, f, indent=2, ensure_ascii=False)
        
        print(f"–®–∞–±–ª–æ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω: {filename}")


class AlertTestData:
    """–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è alert'–æ–≤"""
    
    ALERT_TEXTS = {
        AlertType.SIMPLE: "You clicked a button",
        AlertType.TIMER: "This alert appeared after 5 seconds", 
        AlertType.CONFIRM: "Do you confirm action?",
        AlertType.PROMPT: "Please enter your name"
    }
    
    EXPECTED_RESULTS = {
        "confirm_accept": "You selected Ok",
        "confirm_dismiss": "You selected Cancel"
    }
    
    TEST_INPUTS = {
        "prompt_text": "test_text",
        "prompt_empty": "",
        "prompt_special": "–¢–µ—Å—Ç 123 !@#"
    }


class PerformanceMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤"""
    
    def __init__(self):
        self.start_times = {}
        self.logger = logging.getLogger("PerformanceMonitor")
    
    def start_timing(self, test_name: str):
        """–ù–∞—á–∞—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ç–µ—Å—Ç–∞"""
        self.start_times[test_name] = datetime.now()
        self.logger.debug(f"–ù–∞—á–∞–ª–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è {test_name}")
    
    def end_timing(self, test_name: str) -> float:
        """–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ç–µ—Å—Ç–∞"""
        if test_name not in self.start_times:
            self.logger.warning(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–ª—è {test_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return 0.0
        
        duration = (datetime.now() - self.start_times[test_name]).total_seconds()
        self.logger.info(f"–¢–µ—Å—Ç {test_name} –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {duration:.2f} —Å–µ–∫")
        del self.start_times[test_name]
        return duration


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
def example_usage():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤"""
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    ConfigManager.save_config_template()
    
    # –†–∞–±–æ—Ç–∞ —Å –æ—Ç—á–µ—Ç–∞–º–∏
    reporter = TestReporter(None)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
    reporter.add_result(TestResult("test_simple_alert", "PASSED", 2.5))
    reporter.add_result(TestResult("test_timer_alert", "PASSED", 7.1))
    reporter.add_result(TestResult("test_confirm_alert", "FAILED", 1.8, "Assertion error"))
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
    reporter.generate_json_report()
    reporter.generate_csv_report()
    reporter.print_summary()
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    perf_monitor = PerformanceMonitor()
    perf_monitor.start_timing("test_example")
    # ... –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ ...
    duration = perf_monitor.end_timing("test_example")


if __name__ == "__main__":
    example_usage()
